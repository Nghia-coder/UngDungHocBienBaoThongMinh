import os
import streamlit as st
from ultralytics import YOLO
from PIL import Image
import numpy as np
import cv2
import json
import random
import sqlite3
import datetime
from collections import defaultdict
import google.generativeai as genai

# =====================
# FIX LOG / ENV
# =====================
os.environ["GRPC_VERBOSITY"] = "ERROR"
os.environ["GRPC_TRACE"] = ""
os.environ["GOOGLE_API_USE_CLIENT_CERTIFICATE"] = "false"

# =====================
# CONFIG
# =====================
# !!! THAY TH·∫æ API KEY C·ª¶A B·∫†N V√ÄO ƒê√ÇY !!!
GEMINI_API_KEY = "AIzaSyCq6nzJrXliZZyzVDvPmm6juTOEttRjJdQ" # Replace with your actual API key

MODEL_PATH = "last85.pt"
SIGNS_INFO_PATH = "signs_info.json"
SIGNS_DIR = "signs"
IMG_SIZE = 640
CONF_THRESHOLD = 0.25
DB_PATH = "users.db"
CACHE_DB = "gemini_cache.db"

st.set_page_config(page_title="H·ªçc Bi·ªÉn B√°o Giao Th√¥ng", layout="wide")

# =====================
# CSS GIAO DI·ªÜN
# =====================
st.markdown("""
    <style>
    * { box-sizing: border-box; }
    body { background-color: #fdfdfd; font-family: "Segoe UI", sans-serif; color: #333; }
    .header {
        background: linear-gradient(90deg, #457b9d, #1d3557);
        color: white; padding: 15px 30px; border-radius: 0 0 12px 12px;
        display: flex; align-items: center; gap: 15px;
    }
    .header img { height: 45px; }
    .header h1 { font-size: 1.6rem; margin: 0; font-weight: 600; }
    .stButton>button {
        background: linear-gradient(135deg, #ffb703, #fb8500);
        color: white; border-radius: 8px; padding: 8px 20px;
        font-weight: 600; border: none; transition: all 0.2s ease;
    }
    .stButton>button:hover {
        background: linear-gradient(135deg, #fb8500, #ffb703);
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    /* (S·ª¨A) Th√™m :disabled style cho n√∫t Quiz */
    .stButton>button:disabled {
        background: #ced4da;
        color: #6c757d;
        opacity: 0.7;
        cursor: not-allowed;
    }
    .stButton>button:disabled:hover {
        transform: none;
        box-shadow: none;
        background: #ced4da;
    }

    .sign-card {
        background-color: white; padding: 15px; border-radius: 12px;
        box-shadow: 0 3px 8px rgba(0,0,0,0.1); margin-bottom: 15px;
        color: #333; /* (S·ª¨A) ƒê·∫£m b·∫£o m√†u ch·ªØ t·ªëi tr√™n n·ªÅn tr·∫Øng */
    }
    .footer {
        text-align: center; color: #6c757d; padding: 10px; font-size: 0.9rem;
    }

    /* --- CSS CHO TRANG CHAT --- */

    /* C·ªôt 1 - N√∫t session */
    .st-emotion-cache-1jicfl2 .stButton>button {
        background: #f0f2f6;
        color: #333;
        font-weight: 500;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        text-align: left;
        padding: 12px 15px;
        transition: all 0.2s ease;
        width: 100%; /* ƒê·∫£m b·∫£o n√∫t chi·∫øm ƒë·ªß chi·ªÅu r·ªông */
        margin-bottom: 5px; /* Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t */
    }
    .st-emotion-cache-1jicfl2 .stButton>button:hover {
        background: #e6e8eb;
        color: #111;
        transform: none;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        border-color: #d0d0d0;
    }
    /* Style cho n√∫t session ƒë∆∞·ª£c ch·ªçn (d√πng JS ƒë·ªÉ th√™m class/style) */
    .st-emotion-cache-1jicfl2 .stButton>button.selected-session {
         background: #e7f5ff;
         color: #1d3557;
         border-color: #457b9d;
    }


    /* (S·ª¨A) CƒÉn gi·ªØa n√∫t x√≥a */
     /* Container ch·ª©a n√∫t t√™n v√† n√∫t x√≥a */
    .st-emotion-cache-1jicfl2 div[data-testid="stHorizontalBlock"] {
        align-items: center; /* CƒÉn gi·ªØa c√°c item theo chi·ªÅu d·ªçc */
        margin-bottom: 5px; /* ƒê·ªìng b·ªô kho·∫£ng c√°ch */
    }
    /* N√∫t x√≥a */
    .st-emotion-cache-1jicfl2 .stButton>button[key*="delete_"] {
        background: #fdfdfd;
        color: #888;
        border: 1px solid #e0e0e0;
        padding: 8px 10px; /* ƒêi·ªÅu ch·ªânh padding n·∫øu c·∫ßn */
        height: auto; /* Cho ph√©p chi·ªÅu cao t·ª± ƒë·ªông */
        line-height: normal; /* ƒê·∫£m b·∫£o text/icon cƒÉn gi·ªØa */
        flex-shrink: 0; /* NgƒÉn n√∫t b·ªã co l·∫°i */
    }
    .st-emotion-cache-1jicfl2 .stButton>button[key*="delete_"]:hover {
        background: #fee;
        color: #d00;
        border-color: #fbb;
        transform: none;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    /* C·ªôt 2 - Wrapper ch√≠nh */
    .chat-main-wrapper { }

    /* C·ªôt 2 - √î ƒë·ªïi t√™n */
    .chat-main-wrapper [data-testid="stTextInput"] input {
        font-size: 1.25rem; font-weight: 600; color: #1d3557;
        border: none; border-bottom: 2px solid #e0e0e0; border-radius: 0; padding: 8px 0px;
    }
    .chat-main-wrapper [data-testid="stTextInput"] input:focus {
        box-shadow: none; border-bottom: 2px solid #457b9d;
    }

    /* C·ªôt 2 - Khung ch·ª©a chat */
    .chat-main-wrapper [data-testid="stReportViewBlockContainer"] {
        border: 1px solid #e0e0e0; border-radius: 12px; padding: 10px; background-color: #ffffff;
    }

    /* Chat Bubbles */
    .chat-main-wrapper [data-testid="chatMessageContent"] {
        padding: 12px 18px; border-radius: 20px; max-width: 85%; box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .chat-main-wrapper div[data-testid="stChatMessage"]:has([data-testid="stChatAvatarIcon-assistant"]) [data-testid="chatMessageContent"] {
        background-color: #f0f2f6; color: #333;
    }
    .chat-main-wrapper div[data-testid="stChatMessage"]:has([data-testid="stChatAvatarIcon-user"]) [data-testid="chatMessageContent"] {
        background-color: #457b9d; color: white;
    }
    .chat-main-wrapper div[data-testid="stChatMessage"]:has([data-testid="stChatAvatarIcon-user"]) {
        display: flex; flex-direction: row-reverse;
    }
    .chat-main-wrapper div[data-testid="stChatMessage"]:has([data-testid="stChatAvatarIcon-user"]) [data-testid="chatMessageContent"] * {
        text-align: left; color: white;
    }

    /* Avatars */
    .chat-main-wrapper [data-testid="stChatAvatarIcon-user"] div,
    .chat-main-wrapper [data-testid="stChatAvatarIcon-assistant"] div {
        background-color: #e0e0e0; padding: 4px;
    }
    .chat-main-wrapper [data-testid="stChatAvatarIcon-user"] div { background-color: #fb8500; }
    .chat-main-wrapper [data-testid="stChatAvatarIcon-user"] svg { fill: white; }
    .chat-main-wrapper [data-testid="stChatAvatarIcon-assistant"] div { background-color: #1d3557; }
    .chat-main-wrapper [data-testid="stChatAvatarIcon-assistant"] svg { fill: white; }

    /* Placeholder */
    .chat-placeholder {
        display: flex; align-items: center; justify-content: center; height: 500px;
        background-color: #ffffff; border: 1px solid #e0e0e0; border-radius: 12px;
    }
    .chat-placeholder h3 { color: #888; font-weight: 400; text-align: center; padding: 20px; }

    /* --- H·∫æT CSS CHO TRANG CHAT --- */
    </style>
""", unsafe_allow_html=True)

# =====================
# HEADER
# =====================
st.markdown("""
<div class="header">
    <img src="https://cdn-icons-png.flaticon.com/512/3097/3097144.png">
    <h1>H·ªçc Bi·ªÉn B√°o Giao Th√¥ng üö¶</h1>
</div>
""", unsafe_allow_html=True)

# =====================
# INIT DATABASES
# =====================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL COLLATE NOCASE,
        password TEXT NOT NULL
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS quiz_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        date TEXT NOT NULL,
        score INTEGER NOT NULL,
        total_questions INTEGER NOT NULL
    )''')

    c.execute('''CREATE TABLE IF NOT EXISTS chat_sessions (
        session_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        session_name TEXT NOT NULL,
        created_at TEXT NOT NULL
    )''')

    c.execute('''CREATE TABLE IF NOT EXISTS chat_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        role TEXT NOT NULL,
        message TEXT NOT NULL,
        session_id INTEGER DEFAULT 0 NOT NULL /* Add session_id with default */
    )''')

    # Ensure session_id column exists, add if not (handles older DB)
    c.execute("PRAGMA table_info(chat_history)")
    columns = [col[1] for col in c.fetchall()]
    if 'session_id' not in columns:
        c.execute("ALTER TABLE chat_history ADD COLUMN session_id INTEGER DEFAULT 0 NOT NULL")

    conn.commit()
    conn.close()

def init_cache_db():
    conn = sqlite3.connect(CACHE_DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS gemini_cache (
        sign_name TEXT PRIMARY KEY,
        explanation TEXT
    )''')
    conn.commit()
    conn.close()

init_db()
init_cache_db()

# =====================
# USER FUNCTIONS
# =====================
def register_user(username, password):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def login_user(username, password):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id FROM users WHERE username = ? COLLATE NOCASE AND password = ?", (username, password))
    u = c.fetchone()
    conn.close()
    return u[0] if u else None

def save_quiz_history(uid, score, total):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO quiz_history (user_id, date, score, total_questions) VALUES (?, ?, ?, ?)",
              (uid, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), score, total))
    conn.commit()
    conn.close()

def get_history(uid):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT date, score, total_questions FROM quiz_history WHERE user_id = ? ORDER BY date DESC", (uid,))
    h = c.fetchall()
    conn.close()
    return h

def get_learning_streak(uid):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT date FROM quiz_history WHERE user_id = ? ORDER BY date DESC", (uid,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        return 0

    # Chuy·ªÉn t·∫•t c·∫£ th√†nh set ng√†y (YYYY-MM-DD)
    dates = [datetime.datetime.strptime(r[0], "%Y-%m-%d %H:%M:%S").date() for r in rows]
    unique_days = sorted(list(set(dates)), reverse=True)

    streak = 0
    today = datetime.date.today()

    for i, d in enumerate(unique_days):
        if i == 0:
            # Ng√†y ƒë·∫ßu ti√™n ph·∫£i l√† h√¥m nay ho·∫∑c h√¥m qua m·ªõi b·∫Øt ƒë·∫ßu t√≠nh streak
            if d == today:
                streak = 1
            elif d == today - datetime.timedelta(days=1):
                streak = 1
                today = d  # b·∫Øt ƒë·∫ßu ƒë·∫øm t·ª´ h√¥m qua
            else:
                break
        else:
            if d == today - datetime.timedelta(days=1):
                streak += 1
                today = d
            else:
                break

    return streak

# =====================
# CHAT HISTORY & SESSIONS
# =====================
def save_chat(uid, session_id, role, msg):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO chat_history (user_id, session_id, role, message) VALUES (?, ?, ?, ?)", (uid, session_id, role, msg))
    conn.commit()
    conn.close()

def load_chat(uid, session_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT role, message FROM chat_history WHERE user_id = ? AND session_id = ? ORDER BY id ASC", (uid, session_id))
    chats = c.fetchall()
    conn.close()
    return chats

def get_chat_sessions(uid):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # Migrate old chats (session_id = 0)
    c.execute("SELECT id FROM chat_history WHERE user_id = ? AND session_id = 0 LIMIT 1", (uid,))
    if c.fetchone():
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO chat_sessions (user_id, session_name, created_at) VALUES (?, ?, ?)", (uid, "Cu·ªôc tr√≤ chuy·ªán c≈©", date))
        new_session_id = c.lastrowid
        c.execute("UPDATE chat_history SET session_id = ? WHERE user_id = ? AND session_id = 0", (new_session_id, uid))
        conn.commit()

    c.execute("SELECT session_id, session_name FROM chat_sessions WHERE user_id = ? ORDER BY created_at DESC", (uid,))
    sessions = c.fetchall()
    conn.close()
    return sessions

def create_new_session(uid, name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute("INSERT INTO chat_sessions (user_id, session_name, created_at) VALUES (?, ?, ?)", (uid, name, date))
    new_id = c.lastrowid
    conn.commit()
    conn.close()
    return new_id

def rename_session(session_id, new_name):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE chat_sessions SET session_name = ? WHERE session_id = ?", (new_name, session_id))
    conn.commit()
    conn.close()

def delete_chat_session(session_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM chat_history WHERE session_id = ?", (session_id,))
    c.execute("DELETE FROM chat_sessions WHERE session_id = ?", (session_id,))
    conn.commit()
    conn.close()

# =====================
# YOLO DETECTION
# =====================
@st.cache_resource(show_spinner=False)
def load_model(p): return YOLO(p)

def load_signs(p): return json.load(open(p, "r", encoding="utf-8")) if os.path.exists(p) else {}

def detect(model, img_pil):
    img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
    r = model.predict(source=img, imgsz=IMG_SIZE, conf=CONF_THRESHOLD, verbose=False)[0]
    dets = []
    for box in r.boxes:
        cls_id = int(box.cls.cpu().numpy())
        name = model.model.names.get(cls_id, str(cls_id))
        dets.append({"class_name": name, "conf": float(box.conf.cpu().numpy()), "box": box.xyxy.cpu().numpy().tolist()[0]})
    return dets

def draw_boxes(img_pil, dets):
    img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
    for d in dets:
        x1, y1, x2, y2 = map(int, d["box"])
        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 180, 255), 2)
        cv2.putText(img, d["class_name"], (x1, y1-5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 2)
    return Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

# =====================
# AI GIAO TH√îNG FUNCTIONS (CACHE & QUIZ)
# =====================
def gemini_explain(signs):
    if not GEMINI_API_KEY or GEMINI_API_KEY == "...YOUR_API_KEY_HERE..." or not signs:
        return None

    conn = sqlite3.connect(CACHE_DB)
    c = conn.cursor()
    results = {}

    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel("gemini-2.0-flash")
    except Exception as e:
        conn.close()
        return {sign: f"L·ªói c·∫•u h√¨nh API c·ªßa AI Giao Th√¥ng: {e}" for sign in signs}

    for sign in signs:
        c.execute("SELECT explanation FROM gemini_cache WHERE sign_name=?", (sign,))
        row = c.fetchone()
        if row:
            results[sign] = row[0]
        else:
            try:
                prompt = f"H√£y gi·∫£i th√≠ch ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát v·ªÅ bi·ªÉn b√°o '{sign}'. Tr√¨nh b√†y theo c√∫ ph√°p:\nT√™n bi·ªÉn b√°o\nT√°c d·ª•ng\nM·ª©c ph·∫°t (theo lu·∫≠t giao th√¥ng Vi·ªát Nam nƒÉm 2025)."
                resp = model.generate_content(prompt)
                text = resp.text.strip()
                results[sign] = text
                c.execute("INSERT OR REPLACE INTO gemini_cache (sign_name, explanation) VALUES (?, ?)", (sign, text))
                conn.commit()
            except Exception as e:
                results[sign] = f"L·ªói khi g·ªçi API c·ªßa AI Giao Th√¥ng: {e}"
    conn.close()
    return results

# (M·ªöI) H√†m gi·∫£i th√≠ch c√¢u h·ªèi Quiz
def get_ai_explanation(question, user_answer, correct_answer):
    if not GEMINI_API_KEY or GEMINI_API_KEY == "...YOUR_API_KEY_HERE...":
        return "Vui l√≤ng c·∫•u h√¨nh API Key ƒë·ªÉ nh·∫≠n gi·∫£i th√≠ch chi ti·∫øt."

    try:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel("gemini-2.0-flash")

        prompt = (
            f"Gi·∫£i th√≠ch ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát t·∫°i sao c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi sau:\n"
            f"C√¢u h·ªèi: \"{question}\"\n"
            f"L√† \"{correct_answer}\" ch·ª© kh√¥ng ph·∫£i \"{user_answer}\".\n"
            "Ch·ªâ t·∫≠p trung v√†o lu·∫≠t v√† √Ω nghƒ©a c·ªßa bi·ªÉn b√°o. Kh√¥ng c·∫ßn ch√†o h·ªèi."
        )

        resp = model.generate_content(prompt)
        return resp.text.strip()
    except Exception as e:
        return f"L·ªói khi g·ªçi AI Giao Th√¥ng: {e}"


# =====================
# SESSION
# =====================
# Initialize session state variables if they don't exist
default_states = {
    "user_id": None,
    "username": None,
    "current_session_id": None,
    "session_to_delete": None,
    "quiz_data": [],
    "q": 0,
    "score": 0,
    "answered": False,
    "ai_explanation": None,
    "is_loading_explanation": False
}
for key, default_value in default_states.items():
    if key not in st.session_state:
        st.session_state[key] = default_value


# =====================
# LOGIN / REGISTER
# =====================
if not st.session_state.user_id:
    tab = st.radio("Ch·ªçn h√†nh ƒë·ªông", ["üîê ƒêƒÉng nh·∫≠p", "üìù ƒêƒÉng k√Ω"], horizontal=True)
    st.markdown("<h2 style='text-align:center;margin-top:20px;'>H·ªçc Bi·ªÉn B√°o Giao Th√¥ng üöó</h2>", unsafe_allow_html=True)

    if tab == "üîê ƒêƒÉng nh·∫≠p":
        with st.form(key="login_form"):
            u = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
            p = st.text_input("M·∫≠t kh·∫©u", type="password")
            login_button = st.form_submit_button("ƒêƒÉng nh·∫≠p", use_container_width=True)

        if login_button:
            uid = login_user(u, p)
            if uid:
                st.session_state.user_id = uid
                st.session_state.username = u
                st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                st.rerun()
            else:
                st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")

    else: # Tab ƒêƒÉng k√Ω
        with st.form(key="register_form"):
            u = st.text_input("T√™n ƒëƒÉng nh·∫≠p m·ªõi")
            p = st.text_input("M·∫≠t kh·∫©u", type="password")
            cp = st.text_input("X√°c nh·∫≠n m·∫≠t kh·∫©u", type="password")
            register_button = st.form_submit_button("ƒêƒÉng k√Ω", use_container_width=True)

        if register_button:
            if p != cp:
                st.error("M·∫≠t kh·∫©u kh√¥ng kh·ªõp.")
            elif not u or not p:
                 st.error("T√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            elif register_user(u, p):
                st.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.")
            else:
                st.error("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng).")
    st.stop()

# =====================
# MAIN MENU
# =====================
st.sidebar.title(f"Xin ch√†o, {st.session_state.username} üëã")
if st.sidebar.button("ƒêƒÉng xu·∫•t"):
    # Reset all relevant session state keys on logout
    for key in default_states.keys():
        st.session_state[key] = default_states[key]
    st.rerun()

st.sidebar.markdown("---")
page = st.sidebar.radio("Ch·ªçn trang", ["üè∑Ô∏è Nh·∫≠n di·ªán", "üìò T√†i li·ªáu", "üí¨ Chat v·ªõi AI Giao Th√¥ng", "üß© Quiz", "üìú L·ªãch s·ª≠ Quiz"])

# Load model and signs info (handle potential errors)
try:
    if os.path.exists(MODEL_PATH):
        model = load_model(MODEL_PATH)
    else:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file model t·∫°i '{MODEL_PATH}'.")
        st.stop()

    if os.path.exists(SIGNS_INFO_PATH):
        signs_info = load_signs(SIGNS_INFO_PATH)
    else:
        st.warning(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file '{SIGNS_INFO_PATH}'. Ch·ª©c nƒÉng T√†i li·ªáu v√† Quiz s·∫Ω b·ªã ·∫£nh h∆∞·ªüng.")
        signs_info = {}
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu c·∫ßn thi·∫øt: {e}")
    st.stop()


# =====================
# PAGE 1 - NH·∫¨N DI·ªÜN
# =====================
if page == "üè∑Ô∏è Nh·∫≠n di·ªán":
    st.title("üö¶ Nh·∫≠n di·ªán Bi·ªÉn B√°o Giao Th√¥ng")
    source = st.radio("Ngu·ªìn ·∫£nh", ["üì∏ Camera", "üñºÔ∏è Upload"])
    image_file = st.camera_input("Ch·ª•p ·∫£nh") if source == "üì∏ Camera" else st.file_uploader("T·∫£i ·∫£nh", type=["jpg","jpeg","png"])

    if image_file and st.button("üîç Nh·∫≠n di·ªán bi·ªÉn b√°o"):
        try:
            image = Image.open(image_file).convert("RGB")
            with st.spinner("ƒêang nh·∫≠n di·ªán..."):
                dets = detect(model, image)

            if not dets:
                st.warning("Kh√¥ng ph√°t hi·ªán bi·ªÉn b√°o n√†o.")
            else:
                st.success(f"Ph√°t hi·ªán {len(dets)} bi·ªÉn b√°o!")
                res_img = draw_boxes(image, dets)

                names = list(set(d["class_name"] for d in dets)) # Unique names
                col1, col2 = st.columns(2)
                with col1:
                    st.image(res_img, caption="·∫¢nh ƒë√£ nh·∫≠n di·ªán", use_container_width=True)
                with col2:
                    if os.path.isdir(SIGNS_DIR):
                        for n in names:
                            path = os.path.join(SIGNS_DIR, f"{n}.png")
                            if os.path.exists(path):
                                st.image(path, caption=n, use_container_width='auto') # Use auto width
                            else :
                                st.caption(f"(·∫¢nh {n}.png b·ªã thi·∫øu)")
                    else:
                        st.caption(f"(Th∆∞ m·ª•c '{SIGNS_DIR}' kh√¥ng t·ªìn t·∫°i)")


                if GEMINI_API_KEY and GEMINI_API_KEY != "...YOUR_API_KEY_HERE...":
                    with st.spinner("üîé AI Giao Th√¥ng ƒëang ph√¢n t√≠ch..."):
                        explains = gemini_explain(names)

                    if explains:
                        st.markdown("### üí¨ Th√¥ng tin t·ª´ AI Giao Th√¥ng")
                        for name, text in explains.items():
                            st.markdown(f"**üõë {name}:**\n\n{text}\n---")
                    else:
                        st.error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ AI Giao Th√¥ng. Key API c√≥ th·ªÉ b·ªã sai ho·∫∑c c√≥ l·ªói x·∫£y ra.")
                else:
                    st.info("üí° Vui l√≤ng c·∫•u h√¨nh GEMINI_API_KEY trong code ƒë·ªÉ xem th√¥ng tin AI ph√¢n t√≠ch.")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")


# =====================
# PAGE 2 - T√ÄI LI·ªÜU
# =====================
elif page == "üìò T√†i li·ªáu":
    st.title("üìò T√†i li·ªáu H·ªçc Bi·ªÉn B√°o")
    if not signs_info:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu bi·ªÉn b√°o (thi·∫øu file 'signs_info.json').")
    else:
        grouped = defaultdict(list)
        for k, info in signs_info.items():
            grouped[info.get("category","Kh√°c")].append((k, info))

        search_term = st.text_input("T√¨m ki·∫øm bi·ªÉn b√°o (theo t√™n ho·∫∑c m√¥ t·∫£):")

        for cat, items in grouped.items():
            # Filter items based on search term
            filtered_items = [
                (k, info) for k, info in items
                if not search_term or \
                   search_term.lower() in info.get('title', k).lower() or \
                   search_term.lower() in info.get('description', '-').lower()
            ]

            if filtered_items: # Only show expander if there are matching items
                with st.expander(f"üìó {cat} ({len(filtered_items)})"):
                    cols = st.columns(3)
                    for i, (k, info) in enumerate(filtered_items):
                        with cols[i % 3]:
                            st.markdown(f"<div class='sign-card'>", unsafe_allow_html=True)
                            if os.path.isdir(SIGNS_DIR):
                                path = os.path.join(SIGNS_DIR, f"{k}.png")
                                if os.path.exists(path):
                                    st.image(path, width=120)
                                else:
                                    st.caption(f"(·∫¢nh {k}.png b·ªã thi·∫øu)")
                            else:
                                st.caption(f"(Th∆∞ m·ª•c '{SIGNS_DIR}' kh√¥ng t·ªìn t·∫°i)")

                            st.markdown(f"**{info.get('title',k)}**")
                            st.write(info.get("description","-"))
                            st.markdown("</div>", unsafe_allow_html=True)
        # Indicate if no results found
        if search_term and not any(filtered_items for cat, items in grouped.items() for filtered_items in [[(k, info) for k, info in items if search_term.lower() in info.get('title', k).lower() or search_term.lower() in info.get('description', '-').lower()]]):
             st.info(f"Kh√¥ng t√¨m th·∫•y bi·ªÉn b√°o n√†o kh·ªõp v·ªõi '{search_term}'.")


# =====================
# PAGE 3 - CHAT V·ªöI AI GIAO TH√îNG
# =====================
elif page == "üí¨ Chat v·ªõi AI Giao Th√¥ng":
    st.title("üí¨ Tr√≤ chuy·ªán v·ªõi AI Giao Th√¥ng")

    if not GEMINI_API_KEY or GEMINI_API_KEY == "...YOUR_API_KEY_HERE...":
        st.info("üîë Vui l√≤ng c·∫•u h√¨nh GEMINI_API_KEY trong code ƒë·ªÉ s·ª≠ d·ª•ng chat.")
    else:
        col1, col2 = st.columns([1, 3])
        chat_sessions = get_chat_sessions(st.session_state.user_id)

        # --- C·ªòT 1: L·ªäCH S·ª¨ CHAT V√Ä QU·∫¢N L√ù ---
        with col1:
            st.markdown("### Cu·ªôc tr√≤ chuy·ªán")
            if st.button("üí¨ T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi", use_container_width=True):
                new_id = create_new_session(st.session_state.user_id, f"Cu·ªôc tr√≤ chuy·ªán {len(chat_sessions) + 1}")
                st.session_state.current_session_id = new_id
                st.session_state.session_to_delete = None
                st.rerun()
            st.markdown("---")

            for session_id, session_name in chat_sessions:
                s_col1, s_col2 = st.columns([5, 1])
                with s_col1:
                    is_selected = (session_id == st.session_state.current_session_id and st.session_state.session_to_delete is None)
                    button_key = f"session_{session_id}"
                    if st.button(session_name, key=button_key, use_container_width=True):
                         st.session_state.current_session_id = session_id
                         st.session_state.session_to_delete = None
                         st.rerun()
                    # Apply selected style using JS
                    if is_selected:
                        st.markdown(f"""
                            <script>
                                var buttons = window.parent.document.querySelectorAll('button');
                                buttons.forEach(function(button) {{
                                    if (button.innerText.trim() === "{session_name}") {{
                                        button.classList.add('selected-session'); // Add class for styling
                                    }} else {{
                                        button.classList.remove('selected-session'); // Remove class if not selected
                                    }}
                                }});
                            </script>
                         """, unsafe_allow_html=True)

                with s_col2:
                    if st.button("üóëÔ∏è", key=f"delete_{session_id}", use_container_width=True):
                        st.session_state.session_to_delete = session_id
                        # If deleting the currently selected session, deselect it visually
                        if session_id == st.session_state.current_session_id:
                             st.session_state.current_session_id = None
                        st.rerun()

        # --- C·ªòT 2: KHUNG CHAT CH√çNH ---
        with col2:
            st.markdown('<div class="chat-main-wrapper">', unsafe_allow_html=True)
            if st.session_state.session_to_delete is not None:
                # --- TR·∫†NG TH√ÅI 1: X√ÅC NH·∫¨N X√ìA ---
                st.markdown('<div class="chat-placeholder"><h3>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán n√†y kh√¥ng?</h3></div>', unsafe_allow_html=True)
                session_name_to_delete = next((name for sid, name in chat_sessions if sid == st.session_state.session_to_delete), "Kh√¥ng r√µ")
                st.warning(f"ƒêang x√≥a: **{session_name_to_delete}**")
                del_col1, del_col2 = st.columns(2)
                with del_col1:
                    if st.button("üíî C√≥, t√¥i mu·ªën", use_container_width=True, key="delete_confirm"):
                        delete_chat_session(st.session_state.session_to_delete)
                        st.session_state.session_to_delete = None
                        # current_session_id already set to None above if needed
                        st.rerun()
                with del_col2:
                    if st.button("üíñ Kh√¥ng, k√≠ ·ª©c n√†y qu√° ƒë·∫πp", use_container_width=True, key="delete_cancel"):
                        # If cancel was clicked, restore current session id if it was unset
                        if st.session_state.current_session_id is None and st.session_state.session_to_delete is not None:
                            st.session_state.current_session_id = st.session_state.session_to_delete
                        st.session_state.session_to_delete = None
                        st.rerun()

            elif st.session_state.current_session_id is None:
                # --- TR·∫†NG TH√ÅI 2: PLACEHOLDER ---
                st.markdown('<div class="chat-placeholder"><h3>Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán ho·∫∑c t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.</h3></div>', unsafe_allow_html=True)
            else:
                # --- TR·∫†NG TH√ÅI 3: HI·ªÇN TH·ªä CHAT ---
                current_session_id = st.session_state.current_session_id
                current_session_name = next((name for sid, name in chat_sessions if sid == current_session_id), "...")
                new_name = st.text_input("T√™n cu·ªôc tr√≤ chuy·ªán:", value=current_session_name, key=f"rename_{current_session_id}", label_visibility="collapsed")
                if new_name != current_session_name and new_name:
                    rename_session(current_session_id, new_name)
                    st.rerun()

                chats = load_chat(st.session_state.user_id, current_session_id)
                chat_container = st.container(height=450)
                with chat_container:
                    for role, msg in chats:
                        with st.chat_message(role):
                            st.markdown(msg)

                user_msg = st.chat_input("Nh·∫≠p c√¢u h·ªèi v·ªÅ bi·ªÉn b√°o giao th√¥ng...")
                if user_msg:
                    save_chat(st.session_state.user_id, current_session_id, "user", user_msg)
                    # Display user message immediately before calling API
                    with chat_container:
                         with st.chat_message("user"):
                              st.markdown(user_msg)
                    # Call API and display response
                    try:
                        genai.configure(api_key=GEMINI_API_KEY)
                        # (S·ª¨A) ƒê·∫£m b·∫£o c√≥ system instruction h·ª£p l·ªá
                        system_instruction = (
                            "B·∫°n l√† chuy√™n gia v·ªÅ lu·∫≠t giao th√¥ng Vi·ªát Nam. "
                            "Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, ch·ªâ t·∫≠p trung v√†o bi·ªÉn b√°o v√† m·ª©c ph·∫°t li√™n quan. "
                            "H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n l·ªãch s·ª≠ tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥ C·ª¶A CU·ªòC TR√í CHUY·ªÜN N√ÄY."
                        )
                        model = genai.GenerativeModel("gemini-2.0-flash", system_instruction=system_instruction)
                        # L·∫•y l·∫°i chats *sau khi* l∆∞u tin nh·∫Øn user ƒë·ªÉ ƒë∆∞a v√†o history
                        chats_with_new_user_msg = load_chat(st.session_state.user_id, current_session_id)
                        api_history_formatted = [{"role": ("model" if db_role == "assistant" else "user"), "parts": [{"text": msg}]} for db_role, msg in chats_with_new_user_msg[:-1]] # B·ªè tin nh·∫Øn user cu·ªëi c√πng kh·ªèi history API

                        chat_session = model.start_chat(history=api_history_formatted)
                        resp = chat_session.send_message(user_msg) # Send only the new message
                        reply = resp.text.strip()
                        save_chat(st.session_state.user_id, current_session_id, "assistant", reply)
                    except Exception as e:
                        reply = f"L·ªói khi g·ªçi API c·ªßa AI Giao Th√¥ng: {e}"
                        # Save error message as assistant response? Optional.
                        save_chat(st.session_state.user_id, current_session_id, "assistant", reply) # L∆∞u l·ªói ƒë·ªÉ hi·ªÉn th·ªã
                        st.error(reply) # Show error inline
                    # Rerun to display the new assistant message from db
                    st.rerun() # Rerun AFTER saving assistant message


            st.markdown('</div>', unsafe_allow_html=True)


# =====================
# (N√ÇNG C·∫§P) PAGE 4 - QUIZ
# =====================
elif page == "üß© Quiz":
    st.title("üß© Ki·ªÉm Tra Ki·∫øn Th·ª©c Bi·ªÉn B√°o")
    if not signs_info:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu bi·ªÉn b√°o (thi·∫øu file 'signs_info.json').")
    else:
        # --- Kh·ªüi t·∫°o Quiz ---
        # Initialize only if 'quiz_data' is missing or empty
        if not st.session_state.quiz_data:
            random.seed()
            items = list(signs_info.items())
            qs = []
            num_questions = min(10, len(items))
            valid_items = [(k, info) for k, info in items if info.get("description")]

            if len(valid_items) < num_questions or len(valid_items) < 4: # Need at least 4 items for 3 wrong answers
                st.warning("Kh√¥ng ƒë·ªß c√¢u h·ªèi h·ª£p l·ªá trong d·ªØ li·ªáu ƒë·ªÉ t·∫°o quiz.")
                if len(valid_items) < 4:
                    st.stop()
                num_questions = len(valid_items)


            sampled_items = random.sample(valid_items, num_questions)
            all_descriptions = [info.get("description", "") for _, info in valid_items]

            for k, info in sampled_items:
                correct = info.get("description","")
                possible_wrongs = list(set(all_descriptions) - {correct})
                if len(possible_wrongs) < 3: continue

                wrongs = random.sample(possible_wrongs, 3)
                opts = wrongs + [correct]
                random.shuffle(opts)

                qs.append({
                    "q": f"√ù nghƒ©a c·ªßa bi·ªÉn b√°o **{info.get('title',k)}** l√† g√¨?",
                    "sign_key": k,
                    "options": opts,
                    "answer_index": opts.index(correct),
                    "correct_answer_text": correct
                })

            st.session_state.quiz_data = qs[:num_questions]
            st.session_state.q = 0
            st.session_state.score = 0
            st.session_state.answered = False
            st.session_state.ai_explanation = None
            st.session_state.is_loading_explanation = False

        # --- Hi·ªÉn th·ªã c√¢u h·ªèi ho·∫∑c k·∫øt qu·∫£ ---
        if st.session_state.quiz_data and st.session_state.q < len(st.session_state.quiz_data):
            qs = st.session_state.quiz_data
            q_idx = st.session_state.q
            q_data = qs[q_idx]

            st.progress((q_idx + 1) / len(qs))
            st.subheader(q_data["q"])

            if os.path.isdir(SIGNS_DIR):
                path = os.path.join(SIGNS_DIR, f"{q_data['sign_key']}.png")
                if os.path.exists(path): st.image(path, width=150)
                else: st.caption(f"(·∫¢nh {q_data['sign_key']}.png b·ªã thi·∫øu)")
            else: st.caption(f"(Th∆∞ m·ª•c '{SIGNS_DIR}' kh√¥ng t·ªìn t·∫°i)")

            # Store selected option using session state key specific to question index
            session_key_selected_option = f"selected_option_{q_idx}"
            if session_key_selected_option not in st.session_state:
                 st.session_state[session_key_selected_option] = q_data["options"][0] # Default

            def update_selection():
                # Update session state with the value from the radio button itself
                st.session_state[session_key_selected_option] = st.session_state[f"radio_{q_idx}"]

            # Find the index of the currently selected option in state
            try:
                current_selection_index = q_data["options"].index(st.session_state[session_key_selected_option])
            except ValueError:
                current_selection_index = 0 # Fallback if state is somehow invalid

            selected = st.radio(
                "Ch·ªçn ƒë√°p √°n:",
                q_data["options"],
                key=f"radio_{q_idx}", # Key for the radio widget
                index=current_selection_index,
                on_change=update_selection,
                disabled=st.session_state.answered
            )
            # Use the value from session state for logic
            current_selection = st.session_state[session_key_selected_option]

            # --- Hi·ªÉn th·ªã c√°c n√∫t ---
            col1, col2 = st.columns(2)
            with col1:
                answer_button_disabled = st.session_state.answered
                if st.button("Tr·∫£ l·ªùi", use_container_width=True, disabled=answer_button_disabled, key=f"answer_btn_{q_idx}"):
                    st.session_state.answered = True
                    selected_index = q_data["options"].index(current_selection) # Check against the selection from state

                    if selected_index == q_data["answer_index"]:
                        st.success("‚úÖ Ch√≠nh x√°c!")
                        st.session_state.score += 1
                        st.session_state.is_loading_explanation = False
                    else:
                        st.error(f"‚ùå Sai! ƒê√°p √°n ƒë√∫ng: {q_data['correct_answer_text']}")
                        st.session_state.is_loading_explanation = True

            # --- Logic g·ªçi AI (ch·∫°y sau khi rerun t·ª´ n√∫t Tr·∫£ l·ªùi) ---
            if st.session_state.answered and st.session_state.is_loading_explanation and st.session_state.ai_explanation is None:
                with st.spinner("AI Giao Th√¥ng ƒëang gi·∫£i th√≠ch..."):
                    user_answer_text = current_selection # Use selection from state
                    explanation = get_ai_explanation(q_data["q"], user_answer_text, q_data["correct_answer_text"])
                    st.session_state.ai_explanation = explanation
                st.session_state.is_loading_explanation = False
                st.rerun() # Rerun AGAIN to display explanation and enable Next button

            with col2:
                next_button_disabled = not st.session_state.answered or st.session_state.is_loading_explanation
                if st.button("C√¢u ti·∫øp", use_container_width=True, disabled=next_button_disabled, key=f"next_btn_{q_idx}"):
                    st.session_state.q += 1
                    # Reset states for the next question
                    st.session_state.answered = False
                    st.session_state.ai_explanation = None
                    st.session_state.is_loading_explanation = False
                    # No need to delete selected_option state, it will be ignored for the next q_idx
                    st.rerun()

            # --- Hi·ªÉn th·ªã gi·∫£i th√≠ch AI ---
            if st.session_state.ai_explanation and not st.session_state.is_loading_explanation:
                st.info(st.session_state.ai_explanation)

        elif st.session_state.quiz_data:
             # --- M√†n h√¨nh t·ªïng k·∫øt ---
            score = st.session_state.score
            total = len(st.session_state.quiz_data)
            st.success(f"Ho√†n th√†nh! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {score}/{total} c√¢u.")
            save_quiz_history(st.session_state.user_id, score, total)
            streak = get_learning_streak(st.session_state.user_id)
            proficiency = "Xu·∫•t S·∫Øc"
            if total > 0:
                rate = score / total
                if rate <= 0.4: proficiency = "Y·∫øu"
                elif rate <= 0.6: proficiency = "Trung B√¨nh"
                elif rate <= 0.8: proficiency = "Kh√°"
            else: proficiency = "N/A"

            # Check if quiz_summary class exists before applying markdown
            # Assuming quiz-summary class is defined in CSS
            st.markdown('<div class="quiz-summary">', unsafe_allow_html=True)
            m_col1, m_col2 = st.columns(2)
            with m_col1: st.metric("X·∫øp lo·∫°i", proficiency)
            with m_col2: st.metric("Chu·ªói ng√†y h·ªçc", f"{streak} ng√†y üî•")
            st.markdown('</div>', unsafe_allow_html=True)

            if st.button("L√†m l·∫°i Quiz"):
                # Clear quiz-specific session state before rerunning
                keys_to_delete = ["quiz_data", "q", "score", "answered", "ai_explanation", "is_loading_explanation"]
                # Also remove any potentially lingering selection states
                # Need the previous total to clear selections properly
                prev_total = total if total > 0 else 10 # Estimate if total was 0
                for i in range(prev_total):
                    keys_to_delete.append(f"selected_option_{i}")

                for key in keys_to_delete:
                    if key in st.session_state:
                        del st.session_state[key]
                # Re-initialize quiz_data to empty list to trigger re-creation
                st.session_state.quiz_data = []
                st.rerun()
        else:
             st.info("B·∫Øt ƒë·∫ßu l√†m quiz m·ªõi b·∫±ng c√°ch t·∫£i l·∫°i trang ho·∫∑c ƒëi·ªÅu h∆∞·ªõng.")
             if st.button("B·∫Øt ƒë·∫ßu Quiz m·ªõi"):
                 keys_to_delete = ["quiz_data", "q", "score", "answered", "ai_explanation", "is_loading_explanation"]
                 for key in keys_to_delete:
                     if key in st.session_state:
                         del st.session_state[key]
                 # Re-initialize quiz_data to empty list to trigger re-creation
                 st.session_state.quiz_data = []
                 st.rerun()


# =====================
# PAGE 5 - L·ªäCH S·ª¨ QUIZ
# =====================
elif page == "üìú L·ªãch s·ª≠ Quiz":
    st.title("üìú L·ªãch S·ª≠ L√†m Quiz")
    try:
        h = get_history(st.session_state.user_id)
        if not h:
            st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ l√†m quiz.")
        else:
            st.markdown("K·∫øt qu·∫£ c√°c l·∫ßn ki·ªÉm tra g·∫ßn nh·∫•t c·ªßa b·∫°n:")
            for d, s, t in h:
                try:
                    date_obj = datetime.datetime.strptime(d, "%Y-%m-%d %H:%M:%S")
                    formatted_date = date_obj.strftime("%H:%M %d/%m/%Y")
                except ValueError: formatted_date = d
                st.markdown(f"<div class='sign-card'><b>Ng√†y:</b> {formatted_date}<br><b>ƒêi·ªÉm:</b> {s}/{t}</div>", unsafe_allow_html=True)
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ quiz: {e}")


# =====================
# FOOTER
# =====================
st.markdown("<div class='footer'>·ª®ng d·ª•ng h·ªçc bi·ªÉn b√°o giao th√¥ng ‚Äì YOLOv8 + AI Giao Th√¥ng üå§</div>", unsafe_allow_html=True)
